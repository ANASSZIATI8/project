<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title || 'Register - Online Examination System' %></title>
    <!-- CSS files -->
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/register.css">
    
    <!-- Head content (formerly partials/head.ejs) -->
    <meta name="description" content="Register for the Online Examination System - Create your account to access exams">
    <meta name="keywords" content="exam, register, signup, online exam, education">
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
</head>
<body>
    <!-- Header content (formerly partials/header.ejs) -->
    <header class="main-header">
        <div class="container">
            <div class="logo">
                <a href="/">Online Examination System</a>
            </div>
            <nav class="main-nav">
                <ul>
                    <li><a href="/">Home</a></li>
                    <% if (locals.user) { %>
                        <% if (user.role === 'student') { %>
                            <li><a href="/student-dashboard">Dashboard</a></li>
                            <li><a href="/exams">Available Exams</a></li>
                        <% } else if (user.role === 'teacher') { %>
                            <li><a href="/teacher-dashboard">Dashboard</a></li>
                            <li><a href="/exams/create">Create Exam</a></li>
                        <% } %>
                        <li><a href="/logout">Logout</a></li>
                    <% } else { %>
                        <li><a href="/login">Login</a></li>
                        <li><a href="/register">Register</a></li>
                    <% } %>
                </ul>
            </nav>
        </div>
    </header>
    
    <main>
        <div class="register-container">
            <div class="register-card">
                <div class="register-header">
                    <h1>Create an Account</h1>
                    <p>Start your journey with Online Examination System</p>
                </div>
                
                <div class="register-form">
                    <!-- <% if (locals.errorMessage) { %>
                        <div class="alert alert-danger">
                            <%= errorMessage %>
                            <button class="alert-close" aria-label="Close">√ó</button>
                        </div>
                    <% } %>
                     -->
                    <!-- Progress indicator for multi-step form -->
                    <div class="progress-bar">
                        <div class="step active">
                            <div class="step-number">1</div>
                            <div class="step-label">Personal Info</div>
                        </div>
                        <div class="step">
                            <div class="step-number">2</div>
                            <div class="step-label">Academic Info</div>
                        </div>
                        <div class="step">
                            <div class="step-number">3</div>
                            <div class="step-label">Account Setup</div>
                        </div>
                        <div class="step">
                            <div class="step-number">4</div>
                            <div class="step-label">Confirmation</div>
                        </div>
                    </div>
                    
                    <form action="/register" method="POST" class="auth-form">
                        <!-- Step 1: Personal Information -->
                        <div class="form-section active">
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="nom">Nom</label>
                                    <input type="text" id="nom" name="nom" required
                                           value="<%= locals.formData ? formData.nom : '' %>"
                                           placeholder="Entrez votre nom de famille">
                                </div>
                                
                                <div class="form-group">
                                    <label for="prenom">Pr√©nom</label>
                                    <input type="text" id="prenom" name="prenom" required
                                           value="<%= locals.formData ? formData.prenom : '' %>"
                                           placeholder="Entrez votre pr√©nom">
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label for="email">Adresse Email</label>
                                <input type="email" id="email" name="email" required
                                       value="<%= locals.formData ? formData.email : '' %>"
                                       placeholder="Entrez votre adresse email">
                            </div>
                            
                            <div class="form-group">
                                <label for="dateNaissance">Date de naissance</label>
                                <input type="date" id="dateNaissance" name="dateNaissance" required
                                       value="<%= locals.formData ? formData.dateNaissance : '' %>">
                            </div>
                            
                            <div class="form-group">
                                <label>Sexe</label>
                                <div class="role-selection">
                                    <div class="role-option <%= !locals.formData || formData.sexe === 'M' ? 'active' : '' %>">
                                        <input type="radio" name="sexe" value="M" id="sexe-m"
                                               <%= !locals.formData || formData.sexe === 'M' ? 'checked' : '' %>>
                                        <div class="role-icon">üë®</div>
                                        <div class="role-title">Masculin</div>
                                    </div>
                                    
                                    <div class="role-option <%= locals.formData && formData.sexe === 'F' ? 'active' : '' %>">
                                        <input type="radio" name="sexe" value="F" id="sexe-f"
                                               <%= locals.formData && formData.sexe === 'F' ? 'checked' : '' %>>
                                        <div class="role-icon">üë©</div>
                                        <div class="role-title">F√©minin</div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-footer">
                                <button type="button" class="next-btn">Continuer</button>
                            </div>
                        </div>
                        
                        <!-- Step 2: Academic Information -->
                        <div class="form-section">
                            <div class="form-group">
                                <label for="etablissement">√âtablissement</label>
                                <input type="text" id="etablissement" name="etablissement" required
                                       value="<%= locals.formData ? formData.etablissement : '' %>"
                                       placeholder="Entrez le nom de votre √©tablissement">
                            </div>
                            
                            <div class="form-group">
                                <label for="filiere">Fili√®re</label>
                                <input type="text" id="filiere" name="filiere" required
                                       value="<%= locals.formData ? formData.filiere : '' %>"
                                       placeholder="Entrez votre fili√®re d'√©tudes">
                            </div>
                            
                            <div class="form-footer">
                                <button type="button" class="back-btn">Retour</button>
                                <button type="button" class="next-btn">Continuer</button>
                            </div>
                        </div>
                        
                        <!-- Step 3: Account Setup -->
                        <div class="form-section">
                            <div class="form-group">
                                <label for="password">Mot de passe</label>
                                <input type="password" id="password" name="password" required
                                       placeholder="Cr√©ez un mot de passe">
                                       
                                <div class="password-strength">
                                    <div class="password-strength-bar"></div>
                                </div>
                                
                                <ul class="password-requirements">
                                    <li>Au moins 8 caract√®res</li>
                                    <li>Contient des lettres minuscules</li>
                                    <li>Contient des lettres majuscules</li>
                                    <li>Contient des chiffres ou caract√®res sp√©ciaux</li>
                                </ul>
                            </div>
                            
                            <div class="form-group">
                                <label for="confirmPassword">Confirmer le mot de passe</label>
                                <input type="password" id="confirmPassword" name="confirmPassword" required
                                       placeholder="Confirmez votre mot de passe">
                            </div>
                            
                            <div class="form-footer">
                                <button type="button" class="back-btn">Retour</button>
                                <button type="button" class="next-btn">Continuer</button>
                            </div>
                        </div>
                        
                        <!-- Step 4: Role Selection & Confirmation -->
                        <div class="form-section">
                            <div class="form-group">
                                <label>S√©lectionnez votre r√¥le</label>
                                <div class="role-selection">
                                    <div class="role-option <%= !locals.formData || formData.typeUtilisateur === 'etudiant' ? 'active' : '' %>">
                                        <input type="radio" name="typeUtilisateur" value="etudiant" id="role-etudiant"
                                               <%= !locals.formData || formData.typeUtilisateur === 'etudiant' ? 'checked' : '' %>>
                                        <div class="role-icon">üë®‚Äçüéì</div>
                                        <div class="role-title">√âtudiant</div>
                                        <div class="role-desc">Passer des examens et suivre votre progression</div>
                                    </div>
                                    
                                    <div class="role-option <%= locals.formData && formData.typeUtilisateur === 'enseignant' ? 'active' : '' %>">
                                        <input type="radio" name="typeUtilisateur" value="enseignant" id="role-enseignant"
                                               <%= locals.formData && formData.typeUtilisateur === 'enseignant' ? 'checked' : '' %>>
                                        <div class="role-icon">üë®‚Äçüè´</div>
                                        <div class="role-title">Enseignant</div>
                                        <div class="role-desc">Cr√©er des examens et g√©rer les √©tudiants</div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-check">
                                <input type="checkbox" id="terms" name="terms" required
                                       <%= locals.formData && formData.terms ? 'checked' : '' %>>
                                <label for="terms">J'accepte les <a href="/terms">Conditions d'utilisation</a> et la <a href="/privacy">Politique de confidentialit√©</a></label>
                            </div>
                            
                            <div class="form-footer">
                                <button type="button" class="back-btn">Retour</button>
                                <button type="submit" class="register-btn">Cr√©er un compte</button>
                            </div>
                        </div>
                    </form>
                    
                    <div class="login-link">
                        Vous avez d√©j√† un compte? <a href="/login">Se connecter</a>
                    </div>
                </div>
            </div>
        </div>
    </main>
    
    <!-- Footer content (formerly partials/footer.ejs) -->
    <footer class="main-footer">
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <h3>Online Examination System</h3>
                    <p>A secure platform for taking and managing online exams efficiently.</p>
                </div>
                <div class="footer-section">
                    <h3>Quick Links</h3>
                    <ul>
                        <li><a href="/">Home</a></li>
                        <li><a href="/about">About</a></li>
                        <li><a href="/contact">Contact</a></li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h3>Support</h3>
                    <ul>
                        <li><a href="/help">Help Center</a></li>
                        <li><a href="/faq">FAQ</a></li>
                        <li><a href="/terms">Terms of Service</a></li>
                        <li><a href="/privacy">Privacy Policy</a></li>
                    </ul>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; <%= new Date().getFullYear() %> Online Examination System. All rights reserved.</p>
            </div>
        </div>
    </footer>
    
    <!-- JavaScript -->
    <script src="/js/main.js">
        // Gestionnaire de formulaire multi-√©tapes avec validation
document.addEventListener('DOMContentLoaded', function() {
    // √âl√©ments du DOM
    const formSections = document.querySelectorAll('.form-section');
    const progressSteps = document.querySelectorAll('.step');
    const nextBtns = document.querySelectorAll('.next-btn');
    const backBtns = document.querySelectorAll('.back-btn');
    const form = document.querySelector('.auth-form');
    let currentStep = 0;

    // Variables pour la validation du mot de passe
    const password = document.getElementById('password');
    const confirmPassword = document.getElementById('confirmPassword');
    const passwordStrengthBar = document.querySelector('.password-strength-bar');
    const passwordRequirements = document.querySelectorAll('.password-requirements li');

    // Fonction pour afficher une √©tape sp√©cifique
    function showStep(n) {
        // Masquer toutes les sections
        formSections.forEach(section => {
            section.classList.remove('active');
        });
        
        // Retirer la classe active de tous les steps
        progressSteps.forEach(step => {
            step.classList.remove('active');
        });
        
        // Afficher la section courante
        formSections[n].classList.add('active');
        
        // Activer les steps jusqu'√† l'√©tape courante
        for (let i = 0; i <= n; i++) {
            progressSteps[i].classList.add('active');
        }
        
        currentStep = n;
    }

    // Fonction pour valider une √©tape
    function validateStep(stepNumber) {
        const currentSection = formSections[stepNumber];
        const inputs = currentSection.querySelectorAll('input[required]');
        let isValid = true;
        
        // Supprimer les anciens messages d'erreur
        currentSection.querySelectorAll('.error-message').forEach(msg => msg.remove());
        
        // Valider chaque champ requis
        inputs.forEach(input => {
            if (!input.value.trim()) {
                showError(input, 'Ce champ est requis');
                isValid = false;
            } else {
                // Validations sp√©cifiques selon le type de champ
                switch(input.type) {
                    case 'email':
                        if (!isValidEmail(input.value)) {
                            showError(input, 'Adresse email invalide');
                            isValid = false;
                        }
                        break;
                    case 'date':
                        if (!isValidDate(input.value)) {
                            showError(input, 'Date de naissance invalide');
                            isValid = false;
                        }
                        break;
                    case 'password':
                        if (input.id === 'password' && !isStrongPassword(input.value)) {
                            showError(input, 'Le mot de passe ne respecte pas tous les crit√®res');
                            isValid = false;
                        } else if (input.id === 'confirmPassword' && input.value !== password.value) {
                            showError(input, 'Les mots de passe ne correspondent pas');
                            isValid = false;
                        }
                        break;
                }
            }
        });
        
        // Validation sp√©cifique pour la derni√®re √©tape
        if (stepNumber === 3) {
            const termsCheckbox = currentSection.querySelector('#terms');
            const roleRadios = currentSection.querySelectorAll('input[name="typeUtilisateur"]');
            const sexRadios = currentSection.querySelectorAll('input[name="sexe"]');
            
            // V√©rifier si un r√¥le est s√©lectionn√©
            const roleSelected = Array.from(roleRadios).some(radio => radio.checked);
            if (!roleSelected) {
                showError(roleRadios[0].closest('.role-selection'), 'Veuillez s√©lectionner votre r√¥le');
                isValid = false;
            }
            
            // V√©rifier si les conditions sont accept√©es
            if (!termsCheckbox.checked) {
                showError(termsCheckbox.closest('.form-check'), 'Vous devez accepter les conditions d\'utilisation');
                isValid = false;
            }
        }
        
        return isValid;
    }

    // Fonction pour afficher un message d'erreur
    function showError(element, message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.textContent = message;
        errorDiv.style.color = '#ff4444';
        errorDiv.style.fontSize = '0.875rem';
        errorDiv.style.marginTop = '0.25rem';
        
        // Trouver o√π ins√©rer le message d'erreur
        if (element.closest('.form-group')) {
            element.closest('.form-group').appendChild(errorDiv);
        } else if (element.closest('.role-selection')) {
            element.closest('.role-selection').appendChild(errorDiv);
        } else if (element.closest('.form-check')) {
            element.closest('.form-check').appendChild(errorDiv);
        }
        
        // Ajouter une classe d'erreur √† l'√©l√©ment
        element.classList.add('error');
    }

    // Validation de l'email
    function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    // Validation de la date
    function isValidDate(date) {
        const selectedDate = new Date(date);
        const today = new Date();
        const minAge = new Date(today.getFullYear() - 100, today.getMonth(), today.getDate());
        const maxAge = new Date(today.getFullYear() - 13, today.getMonth(), today.getDate());
        
        return selectedDate >= minAge && selectedDate <= maxAge;
    }

    // Validation de la force du mot de passe
    function isStrongPassword(password) {
        const minLength = password.length >= 8;
        const hasLowercase = /[a-z]/.test(password);
        const hasUppercase = /[A-Z]/.test(password);
        const hasNumber = /[0-9]/.test(password);
        const hasSpecial = /[!@#$%^&*]/.test(password);
        
        return minLength && hasLowercase && hasUppercase && (hasNumber || hasSpecial);
    }

    // Mise √† jour de la force du mot de passe
    function updatePasswordStrength() {
        const password = document.getElementById('password').value;
        let strength = 0;
        const requirements = passwordRequirements;
        
        // V√©rifier chaque crit√®re
        if (password.length >= 8) {
            strength += 25;
            requirements[0].classList.add('valid');
        } else {
            requirements[0].classList.remove('valid');
        }
        
        if (/[a-z]/.test(password)) {
            strength += 25;
            requirements[1].classList.add('valid');
        } else {
            requirements[1].classList.remove('valid');
        }
        
        if (/[A-Z]/.test(password)) {
            strength += 25;
            requirements[2].classList.add('valid');
        } else {
            requirements[2].classList.remove('valid');
        }
        
        if (/[0-9!@#$%^&*]/.test(password)) {
            strength += 25;
            requirements[3].classList.add('valid');
        } else {
            requirements[3].classList.remove('valid');
        }
        
        // Mettre √† jour la barre de force
        passwordStrengthBar.style.width = strength + '%';
        
        if (strength < 50) {
            passwordStrengthBar.style.backgroundColor = '#ff4444';
        } else if (strength < 75) {
            passwordStrengthBar.style.backgroundColor = '#ffaa00';
        } else {
            passwordStrengthBar.style.backgroundColor = '#00aa00';
        }
    }

    // Event listeners pour les boutons
    nextBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            if (validateStep(currentStep)) {
                if (currentStep < formSections.length - 1) {
                    showStep(currentStep + 1);
                }
            }
        });
    });

    backBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            if (currentStep > 0) {
                showStep(currentStep - 1);
            }
        });
    });

    // Event listener pour la validation du mot de passe
    if (password) {
        password.addEventListener('input', updatePasswordStrength);
    }

    // Event listener pour la confirmation du mot de passe
    if (confirmPassword) {
        confirmPassword.addEventListener('input', function() {
            const errorMsg = this.parentElement.querySelector('.error-message');
            if (errorMsg) {
                errorMsg.remove();
            }
            
            if (this.value !== password.value) {
                showError(this, 'Les mots de passe ne correspondent pas');
            }
        });
    }

    // Validation finale lors de la soumission
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Valider toutes les √©tapes
        let allValid = true;
        for (let i = 0; i < formSections.length; i++) {
            if (!validateStep(i)) {
                allValid = false;
                showStep(i); // Retourner √† l'√©tape avec erreur
                break;
            }
        }
        
        if (allValid) {
            // Soumettre le formulaire
            this.submit();
        }
    });

    // Gestion des options radio avec classes actives
    const roleOptions = document.querySelectorAll('.role-option');
    roleOptions.forEach(option => {
        option.addEventListener('click', function() {
            const radio = this.querySelector('input[type="radio"]');
            const siblings = this.parentElement.querySelectorAll('.role-option');
            
            siblings.forEach(sibling => sibling.classList.remove('active'));
            this.classList.add('active');
            radio.checked = true;
        });
    });

    // Supprimer les erreurs lorsque l'utilisateur commence √† taper
    document.querySelectorAll('input').forEach(input => {
        input.addEventListener('input', function() {
            this.classList.remove('error');
            const errorMsg = this.parentElement.querySelector('.error-message');
            if (errorMsg) {
                errorMsg.remove();
            }
        });
    });
});
    </script>
</body>
</html>